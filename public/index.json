
[{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/github-action/","section":"Tags","summary":"","title":"Github Action","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/iam/","section":"Tags","summary":"","title":"IAM","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/","section":"Kuanting Wu","summary":"","title":"Kuanting Wu","type":"page"},{"content":"This post will explore how to set up an S3 bucket for hosting a Vue.js frontend as part of migrating to a serverless structure. Covering Terraform configurations and key considerations for proper routing, followed by setting up OpenID Connect in IAM roles, policies, and GitHub Actions permissions.\nCreating Terraform Code for S3 Bucket # To streamline infrastructure setup, I use Terraform to define and deploy resources. The infrastructure code for this setup can be found Here.\nBelow is an example Terraform configuration to create an S3 bucket for static website hosting:\n# S3 bucket for hosting a Vue.js website resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;vue_website\u0026#34; { bucket = \u0026#34;quantifyjiujitsu.com\u0026#34; # Must be globally unique tags = { Name = \u0026#34;Quantify Jiujitsu Website Bucket\u0026#34; } } resource \u0026#34;aws_s3_bucket_public_access_block\u0026#34; \u0026#34;public_access_block\u0026#34; { bucket = aws_s3_bucket.vue_website.id block_public_acls = false block_public_policy = false ignore_public_acls = false restrict_public_buckets = false } # Bucket policy to allow public access to all objects within the bucket resource \u0026#34;aws_s3_bucket_policy\u0026#34; \u0026#34;vue_policy\u0026#34; { bucket = aws_s3_bucket.vue_website.id policy = jsonencode({ Version = \u0026#34;2012-10-17\u0026#34; Statement = [ { Sid = \u0026#34;PublicReadGetObject\u0026#34; Effect = \u0026#34;Allow\u0026#34; Principal = \u0026#34;*\u0026#34; Action = \u0026#34;s3:GetObject\u0026#34; Resource = \u0026#34;${aws_s3_bucket.vue_website.arn}/*\u0026#34; } ] }) depends_on = [aws_s3_bucket_public_access_block.public_access_block] } resource \u0026#34;aws_s3_bucket_website_configuration\u0026#34; \u0026#34;example\u0026#34; { bucket = aws_s3_bucket.vue_website.id index_document { suffix = \u0026#34;index.html\u0026#34; } error_document { key = \u0026#34;index.html\u0026#34; } } Important Configuration Note # Since Vue.js is a single-page application, proper routing configuration is essential. Ensure both the index_document and error_document are set to index.html. This ensures all routes are correctly handled by the frontend.\nSetting Up OIDC for Secure GitHub Actions Integration # To securely deploy infrastructure using GitHub Actions, we recommend setting up OIDC (OpenID Connect) authentication with AWS. This approach eliminates the need to store long-term credentials.\nTerraform Configuration for IAM Setup # The following Terraform code snippet from the repository sets up the necessary IAM components for OIDC integration:\ndata \u0026#34;aws_caller_identity\u0026#34; \u0026#34;current\u0026#34; {} resource \u0026#34;aws_iam_openid_connect_provider\u0026#34; \u0026#34;github_actions_oidc\u0026#34; { url = \u0026#34;https://token.actions.githubusercontent.com\u0026#34; client_id_list = [\u0026#34;sts.amazonaws.com\u0026#34;] thumbprint_list = [\u0026#34;6938fd4d98bab03faadb97b34396831e3780aea1\u0026#34;] } resource \u0026#34;aws_iam_role\u0026#34; \u0026#34;github_oidc_role\u0026#34; { name = \u0026#34;github-actions-oidc-role\u0026#34; assume_role_policy = jsonencode({ Version = \u0026#34;2012-10-17\u0026#34;, Statement = [ { Effect = \u0026#34;Allow\u0026#34;, Principal = { Federated = \u0026#34;arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/token.actions.githubusercontent.com\u0026#34; }, Action = \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, Condition = { StringEquals = { \u0026#34;token.actions.githubusercontent.com:aud\u0026#34; = \u0026#34;sts.amazonaws.com\u0026#34;, \u0026#34;token.actions.githubusercontent.com:sub\u0026#34; = \u0026#34;repo:${var.github_repo}:ref:refs/heads/main\u0026#34; } } } ] }) } resource \u0026#34;aws_iam_policy\u0026#34; \u0026#34;github_deploy_policy\u0026#34; { name = \u0026#34;github-deploy-s3-policy\u0026#34; description = \u0026#34;Policy for GitHub Actions to deploy to S3\u0026#34; policy = jsonencode({ Version = \u0026#34;2012-10-17\u0026#34;, Statement = [ { Effect = \u0026#34;Allow\u0026#34;, Action = [\u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;], Resource = [ \u0026#34;arn:aws:s3:::${var.s3_bucket_name}\u0026#34;, \u0026#34;arn:aws:s3:::${var.s3_bucket_name}/*\u0026#34; ] } ] }) } resource \u0026#34;aws_iam_role_policy_attachment\u0026#34; \u0026#34;github_deploy_policy_attach\u0026#34; { role = aws_iam_role.github_oidc_role.name policy_arn = aws_iam_policy.github_deploy_policy.arn } Setting Up GitHub Actions # Sample GitHub Actions Workflow:\nname: Deploy Vue.js to S3 on: push: branches: - main permissions: id-token: write contents: read jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Set up Node.js uses: actions/setup-node@v3 with: node-version: \u0026#39;16\u0026#39; - name: Install dependencies run: npm install - name: Build the Vue.js project run: npm run build - name: Configure AWS CLI uses: aws-actions/configure-aws-credentials@v3 with: role-to-assume: arn:aws:iam::654654621599:role/${{ secrets.AWS_GITHUB_ROLE }} role-session-name: github-action aws-region: us-east-1 - name: Deploy to S3 run: aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete Note for GitHub Secrets # To securely manage sensitive information, the following GitHub secrets are required:\nsecrets.AWS_GITHUB_ROLE\nThis secret should contain the ARN of the IAM role that GitHub Actions will assume during deployment. Example value: arn:aws:iam::654654621599:role/github-actions-oidc-role secrets.S3_BUCKET_NAME\nThis secret should hold the name of the S3 bucket where the Vue.js frontend will be deployed. Example value: qj-frontend-bucket ","date":"8 February 2025","externalUrl":null,"permalink":"/posts/1738978083544-migrating-to-serverless-structure-setting-up-s3-bucket-for-vue.js-frontend/","section":"Posts","summary":"","title":"Migrating to Serverless Structure: Setting Up S3 Bucket for Vue.js Frontend","type":"posts"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/s3/","section":"Tags","summary":"","title":"S3","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/terraform/","section":"Tags","summary":"","title":"Terraform","type":"tags"},{"content":"","date":"27 January 2025","externalUrl":null,"permalink":"/tags/ses/","section":"Tags","summary":"","title":"SES","type":"tags"},{"content":" Brief Introduction # Amazon Simple Email Service (SES) is a scalable, reliable way to send emails. This guide documented how I configured Amazon SES with the SDK, IAM permissions, and a Node.js backend.\nVerify Your Domain or Email Address in SES # To send emails using SES, first verify your domain or email address:\nGo to the SES Console:\nNavigate to Verified Identities and click Create Identity. Choose Domain or Email Address:\nFor a domain, add the TXT, MX, and CNAME records to your DNS as specified. For an email address, verify it by clicking the link sent to your inbox. Request Production Access # SES accounts are initially in the sandbox environment, which restricts email sending. To lift these restrictions:\nGo to the Account Details section in the SES console. Click on Request Production Access. Create an IAM User with SES Permissions # To securely interact with SES, create an IAM user:\nGo to the IAM Console:\nClick on Users and then Add Users. Set User Details:\nEnter a username, e.g., SES-User. Attach SES Permissions:\nAdd the AmazonSESFullAccess policy to the user. { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ses:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Generate Access Keys: Save the Access Key ID and Secret Access Key for use in your backend. Set Up the Database # For managing users and email verification, create the following users table:\nSQL Table Schema # CREATE TABLE users ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(31) NOT NULL UNIQUE, email VARCHAR(255) NOT NULL UNIQUE, hashed_password VARCHAR(64) NOT NULL, email_verified BOOLEAN DEFAULT false, verification_token VARCHAR(64) NULL, verification_token_expiry DATETIME NULL, reset_token VARCHAR(64) NULL, reset_token_expiry DATETIME NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); This schema supports email verification and password reset functionality.\nYour Backend Code for Email Verification # Below is your backend implementation for handling user registration, sending verification emails, and verifying the user.\nBackend Code # // Send verification email using Amazon SES const verificationLink = `https://quantifyjiujitsu.com/verify-email?token=${verificationToken}`; // Create the SES email parameters const params = { Source: \u0026#39;no-reply@quantifyjiujitsu.com\u0026#39;, // SES verified email Destination: { ToAddresses: [email], // Recipient email }, Message: { Subject: { Data: \u0026#39;Email Verification - Quantify Jiu-Jitsu\u0026#39;, }, Body: { Html: { Data: `\u0026lt;p\u0026gt;Hi ${name},\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;Please verify your email by clicking the link below:\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;${verificationLink}\u0026#34;\u0026gt;Verify Email\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;` }, }, }, }; try { // Send the email via SES const command = new SendEmailCommand(params); const data = await client.send(command); console.log(\u0026#39;Email sent successfully:\u0026#39;); // Respond after successful registration and email sent res.status(201).json({ message: \u0026#39;User registered successfully! Check your email to verify your account.\u0026#39; }); } catch (error) { console.error(\u0026#39;Error sending verification email:\u0026#39;, error); res.status(500).json({ error: \u0026#39;Failed to send verification email\u0026#39; }); } This code handles sending verification emails and ensures the user receives a link to confirm their email address.\nTest the Integration # Register a User:\nUse a REST client (e.g., Postman) to send a POST request to the registration endpoint with a JSON body containing name, email, and password. Check the Email:\nVerify the email sent via SES and click the link provided. Verify the User in the Database:\nAfter clicking the verification link, confirm that the email_verified column in the database updates to true. ","date":"27 January 2025","externalUrl":null,"permalink":"/posts/1737991070463-setting-up-email-verification-with-amazon-ses-iam-permissions-and-a-backend/","section":"Posts","summary":"","title":"Setting Up Email Verification with Amazon SES, IAM Permissions, and a Backend","type":"posts"},{"content":"","date":"15 December 2024","externalUrl":null,"permalink":"/tags/builder.io/","section":"Tags","summary":"","title":"Builder.io","type":"tags"},{"content":"","date":"15 December 2024","externalUrl":null,"permalink":"/tags/figma/","section":"Tags","summary":"","title":"Figma","type":"tags"},{"content":" Prerequisite # Before starting, ensure the following steps are completed:\nUI Design Completed in Figma: Your application’s user interface should already be fully designed in Figma. Vue.js Development Environment Setup: Install Node.js and npm (or yarn). Create a Vue.js project using Vue CLI or Vite: # Using Vue CLI vue create my-project # Using Vite npm create vite@latest my-project --template vue Start the development server: cd my-project npm run dev What is Builder.io # Builder.io is by far the most accurate and reliable way I found for generating code from Figma designs. Builder.io is a powerful visual development tool that enables designers and developers to create and convert designs into production-ready code for various frameworks, including Vue.js. It integrates seamlessly with Figma, allowing users to export components or full pages directly into clean, reusable code. This tool is especially helpful for bridging the gap between design and development, reducing manual coding efforts while maintaining design fidelity.\nKey features of Builder.io include:\nSupport for multiple frameworks (Vue.js, React, Angular, etc.). Tailwind CSS integration for consistent styling. Modular component generation for scalability. Easy-to-use Figma plugin for direct export. Turning Figma Visual designs into Code # Follow these steps to convert your Figma design into Vue.js code:\nInstall and Use the Builder.io Plugin # Search for Builder.io in Figma:\nOpen Figma and navigate to the \u0026ldquo;Plugins\u0026rdquo; section. Search for the Builder.io plugin and install it. Open your design in Figma and run the Builder.io plugin. Export Components:\nSelect components or elements in your design that you want to convert into code. I recommend exporting reusable components (e.g., buttons, forms, headers) individually for better modularity. Use Builder.io to generate Vue.js code for each component. Address Common Issues # Inspect Generated Code:\nOpen the generated Vue.js code and verify its structure, styles, and logic. Pay special attention to CSS classes, bindings, and event handling. Fix Known Issues:\nMy personal experience suggests that the button background color might not always match the design. Check the class or style properties for buttons and update them with the correct Tailwind CSS class or inline style: \u0026lt;button class=\u0026#34;bg-blue-500 text-white py-2 px-4 rounded\u0026#34;\u0026gt; Button Text \u0026lt;/button\u0026gt; ","date":"15 December 2024","externalUrl":null,"permalink":"/posts/1734294836897-figma-builder.io-ui-design-to-code/builder.io-ui-design-to-code/","section":"Posts","summary":"","title":"Figma Builder.io UI design to code","type":"posts"},{"content":"","date":"15 December 2024","externalUrl":null,"permalink":"/tags/vue.js/","section":"Tags","summary":"","title":"Vue.js","type":"tags"},{"content":" Certification Certificate Link Issuer Date AWS Certified Solutions Architect – Associate Amazon Web Services Training and Certification December 19, 2024 AWS Certified Cloud Practitioner Amazon Web Services Training and Certification October 8, 2024 Experience Company Link Role Dates Location Automation Architech Intern Sep, 2022 - Sep, 2023 Full Remote, Atlanta US Education School Link Degree Date National Cheng Kung University Bachelor of Science, Physics 2020 - 2024 ","date":"13 June 2022","externalUrl":null,"permalink":"/resume/","section":"Kuanting Wu","summary":"","title":"Resume","type":"page"},{"content":"I graduated from National Cheng Kung University with a bachelor\u0026rsquo;s degree in physics. Along the way, I took several computer science classes, which sparked my interest in cloud engineering. Since then, I’ve earned AWS Cloud Practitioner and Solutions Architect Associate certifications as I work toward building a strong foundation in the field.\nOutside of tech, I’m passionate about Brazilian jiu-jitsu. I’m currently working on the Quantify Jiu-jitsu platform, where I aim to use my expertise in cloud technology to improve the study experience for practitioners. The platform focuses on enhancing study notes management and allows users to share their notes with friends, creating a collaborative learning environment.\nI’m excited to continue growing my skills and contributing to both the cloud computing industry and the BJJ community.\n","date":"13 June 2022","externalUrl":null,"permalink":"/about/","section":"Kuanting Wu","summary":"","title":"About","type":"page"},{"content":" Logo Title Description References Quantify Jiujitsu An interactive platform designed to enhance study notes management and allows users to share their notes with friends. Site Web Code Infra Code ","date":"13 June 2022","externalUrl":null,"permalink":"/projects/","section":"Kuanting Wu","summary":"","title":"Projects","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]